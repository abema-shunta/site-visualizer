width = window.innerWidth
height = window.innerHeight

activeDate = new Date()
formatDate = (d) -> "#{d.getFullYear()}_#{('0'+(d.getMonth()+1)).slice(-2)}_#{('0'+d.getDate()).slice(-2)}"

canvas = document.querySelector("canvas")
context = canvas.getContext("2d")
canvas.setAttribute("width", width)
canvas.setAttribute("height", height)

links = undefined
nodes = undefined

nodeMax = undefined
linkMax = undefined

getMax = (items)->
  max = 0
  items.forEach (i)->
    vol = parseInt(i.volume)
    max = vol if vol > max
  max

considerFixedPosition = (d)->
  if d.etype == "start"
    d.x = 20
    d.y = 20
  else if d.etype == "end"
    d.x = width - 20
    d.y = height - 20

d3.csv "csv/GenerateLinksForSiteVisualization_#{formatDate activeDate}.csv", (link_error, _links) ->
  throw link_error if link_error
  links = _links
  linkMax = getMax links

  d3.csv "csv/GenerateNodesForSiteVisualization_#{formatDate activeDate}.csv", (node_error, _nodes) ->
    throw node_error if node_error
    nodes = _nodes
    nodeMax = getMax nodes

    simulation = d3.forceSimulation()
      .force('link', d3.forceLink().id((d) -> d.id))
      .force('charge', d3.forceManyBody())
      .force('center', d3.forceCenter(width / 2, height / 2))
      .force('collide', d3.forceCollide().radius((d) -> return 5+35*(d.volume/nodeMax)).iterations(2))

    dragstarted = ->
      if !d3.event.active
        simulation.alphaTarget(0.3).restart()
      d3.event.subject.fx = d3.event.subject.x
      d3.event.subject.fy = d3.event.subject.y
      return

    dragged = ->
      d3.event.subject.fx = d3.event.x
      d3.event.subject.fy = d3.event.y
      return

    dragended = ->
      if !d3.event.active
        simulation.alphaTarget 0
      d3.event.subject.fx = null
      d3.event.subject.fy = null
      return

    drawLink = (d) ->
      #context.lineWidth = 1+(5*(d.volume/linkMax))
      context.moveTo d.source.x, d.source.y
      context.lineTo d.target.x, d.target.y
      return

    drawNode = (d) ->
      context.moveTo d.x + 3, d.y
      context.arc d.x, d.y, 5 + 35 * (d.volume/nodeMax) , 0, 2 * Math.PI
      return

    ticked = ->
      nodes.forEach considerFixedPosition
      context.clearRect 0, 0, width, height
      context.beginPath()
      links.forEach drawLink
      context.stroke()
      context.strokeStyle = '#aaa'
      context.beginPath()
      nodes.forEach drawNode
      context.fillStyle = '#fff'
      context.fill()
      context.strokeStyle = '#fff'
      context.stroke()

    dragsubject = ->
      simulation.find d3.event.x, d3.event.y

    simulation.nodes(nodes).on 'tick', ticked
    simulation.force('link').links(links).distance((d)-> ((linkMax - d.volume)/linkMax)*300 + 100)
    d3.select(canvas).call d3.drag().container(canvas).subject(dragsubject).on('start', dragstarted).on('drag', dragged).on('end', dragended)

# ---
# generated by js2coffee 2.2.0

# isAllowedOpenDetail = false
#
# resetActiveNode = ()->
#   activeNode = null
#
# c = (t)-> console.log t
#
# openDetail = (path) ->
#   c "openDetail"
#   if isAllowedOpenDetail
#     window.open().location.href = "http://" + path
#
# prepareOpenDetail = ()->
#   c "prepareOpenDetail"
#   isAllowedOpenDetail = true
#
# preventOpenDetail = ()->
#   c "preventOpenDetail"
#   isAllowedOpenDetail = false
#
# displayDetail = (path, title, volume, id)->
#   c "displayDetail"
#   activeNode = id
#   detail_panel = document.querySelector("#detail_panel")
#   title_elm = detail_panel.querySelector(".title")
#   title_elm.textContent = title
#   path_elm = detail_panel.querySelector(".path")
#   path_elm.setAttribute('href', "http://" + path)
#   path_elm.textContent = path
#   vol_elm = detail_panel.querySelector(".volume")
#   vol_elm.textContent = volume
